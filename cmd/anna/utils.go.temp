package anna

import (
	"bytes"
	"html/template"
	"io/fs"
	"os"
	"strings"
	"time"

	"github.com/yuin/goldmark"
	"github.com/yuin/goldmark/renderer/html"
	"gopkg.in/yaml.v3"
)

}

func (g *Generator) parseConfig() {
	configFile, err := os.ReadFile(SiteDataPath + "layout/config.yml")
	if err != nil {
		g.ErrorLogger.Fatal(err)
	}

	err = yaml.Unmarshal(configFile, &g.LayoutConfig)
	if err != nil {
		g.ErrorLogger.Fatal(err)
	}
}

func (g *Generator) parseRobots() {
	tmpl, err := template.ParseFiles(SiteDataPath + "layout/robots.txt")
	if err != nil {
		g.ErrorLogger.Fatal(err)
	}

	var buffer bytes.Buffer
	err = tmpl.Execute(&buffer, g.LayoutConfig)
	if err != nil {
		g.ErrorLogger.Fatal(err)
	}

	outputFile, err := os.Create(SiteDataPath + "rendered/robots.txt")
	if err != nil {
		g.ErrorLogger.Fatal(err)
	}
	defer outputFile.Close()

	_, err = outputFile.Write(buffer.Bytes())
	if err != nil {
		g.ErrorLogger.Fatal(err)
	}
}

func (g *Generator) generateSitemap() {
	var buffer bytes.Buffer
	buffer.WriteString("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n")
	buffer.WriteString("<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n")

	// iterate over parsed markdown files
	for _, templateData := range g.Templates {
		url := g.LayoutConfig.BaseURL + "/" + templateData.Filename + ".html"
		buffer.WriteString(" <url>\n")
		buffer.WriteString("    <loc>" + url + "</loc>\n")
		buffer.WriteString("    <lastmod>" + templateData.Frontmatter.Date + "</lastmod>\n")
		buffer.WriteString(" </url>\n")
	}
	buffer.WriteString("</urlset>\n")
	outputFile, err := os.Create(SiteDataPath + "rendered/sitemap.xml")
	if err != nil {
		g.ErrorLogger.Fatal(err)
	}
	defer outputFile.Close()
	_, err = outputFile.Write(buffer.Bytes())
	if err != nil {
		g.ErrorLogger.Fatal(err)
	}
}

func (g *Generator) generateFeed() {
	var buffer bytes.Buffer
	buffer.WriteString("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n")
	buffer.WriteString("<feed xmlns=\"http://www.w3.org/2005/Atom\">\n")
	buffer.WriteString("    <title>" + g.LayoutConfig.SiteTitle + "</title>\n")
	buffer.WriteString("    <link href=\"" + g.LayoutConfig.BaseURL + "/" + "\" rel=\"self\"/>\n")
	buffer.WriteString("    <updated>" + time.Now().Format(time.RFC3339) + "</updated>\n")

	// iterate over parsed markdown files that are non-draft posts
	for _, templateData := range g.Templates {
		if !templateData.Frontmatter.Draft {
			buffer.WriteString("    <entry>\n")
			buffer.WriteString("        <title>" + templateData.Frontmatter.Title + "</title>\n")
			buffer.WriteString("        <link href=\"" + g.LayoutConfig.BaseURL + "/posts/" + templateData.Filename + ".html\"/>\n")
			buffer.WriteString("        <id>" + g.LayoutConfig.BaseURL + "/" + templateData.Filename + ".html</id>\n")
			buffer.WriteString("        <updated>" + time.Unix(templateData.Date, 0).Format(time.RFC3339) + "</updated>\n")
			buffer.WriteString("        <content type=\"html\"><![CDATA[" + string(templateData.Body) + "]]></content>\n")
			buffer.WriteString("    </entry>\n")
		}
	}

	buffer.WriteString("</feed>\n")
	outputFile, err := os.Create(SiteDataPath + "rendered/feed.atom")
	if err != nil {
		g.ErrorLogger.Fatal(err)
	}
	defer outputFile.Close()
	_, err = outputFile.Write(buffer.Bytes())
	if err != nil {
		g.ErrorLogger.Fatal(err)
	}
}
