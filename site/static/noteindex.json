{"notes/collaboration/Collaboration and Merging.html":{"CompleteURL":"notes/collaboration/Collaboration and Merging.html","Date":1713052800,"Frontmatter":{"Title":"Collaboration and Merging","Date":"2024-04-14","Draft":false,"JSFiles":null,"Type":"note","Description":"A collection of notes that I've taken down, understanding ways to implement collabration in applications. Inspired by CRDT and Automerge","PreviewImage":"","Tags":null,"Authors":null,"Head":true},"Body":"\u003ch1\u003eRefereals\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://automerge.org/\"\u003eAutomerge\u003c/a\u003e using CRDT implementation\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"\"\u003eGoogle Docs\u003c/a\u003e using the same inplementation\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://webrtc.org/\"\u003eWebRTC\u003c/a\u003e enabling \u003cstrong\u003ereal time\u003c/strong\u003e communication : server less apporach. More of a P2P approach\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/automerge/mpl\"\u003eMPL\u003c/a\u003e P2P Document synchronisation system for automerge\u003c/li\u003e\n\u003cli\u003eThink about \u003ca href=\"\"\u003eWeb Sockets\u003c/a\u003e for client/server communications\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1\u003eNotes\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca id=\"zettel-reference\" href=\"/notes/collaboration/Json like abstraction in Automerge.html\"\u003eJson like abstraction in Automerge\u003c/a\u003e for application data.\u003c/li\u003e\n\u003c/ul\u003e\n","MarkdownBody":"# Refereals\n\n- [Automerge](https://automerge.org/) using CRDT implementation\n- [Google Docs]() using the same inplementation\n- [WebRTC](https://webrtc.org/) enabling **real time** communication : serv","LinkedNoteURLs":["notes/collaboration/Json like abstraction in Automerge.html"]},"notes/collaboration/Json like abstraction in Automerge.html":{"CompleteURL":"notes/collaboration/Json like abstraction in Automerge.html","Date":1713052800,"Frontmatter":{"Title":"Json like abstraction in Automerge","Date":"2024-04-14","Draft":false,"JSFiles":null,"Type":"note","Description":"","PreviewImage":"","Tags":null,"Authors":null,"Head":false},"Body":"\u003cp\u003eAn example of some kind of representation of data as a todo list\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-json\"\u003e{ \n  \u0026quot;to-do\u0026quot;: [\n    {\u0026quot;title\u0026quot;: \u0026quot;buy-milk\u0026quot;, \u0026quot;done\u0026quot;: false},\n    {\u0026quot;title\u0026quot;: \u0026quot;take-out-trash\u0026quot;, \u0026quot;done\u0026quot;: true}\n  ]\n  \u0026quot;settings\u0026quot;: {\n    \u0026quot;alert-sound\u0026quot;: \u0026quot;ring\u0026quot;,\n  },\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe can have editing operations, such as insertion of new tasks, adding a new data structure, updating values...\u003c/p\u003e\n\u003cp\u003eAutomerge uses \u003ca id=\"zettel-reference\" href=\"/notes/collaboration/immutable state objects.html\"\u003eimmutable state objects\u003c/a\u003e, where the current state of data cannot be modified. Automerge capture the canges and stores the operations made in a \u003cstrong\u003elog of operations\u003c/strong\u003e, somewhat like this\u003c/p\u003e\n","MarkdownBody":"An example of some kind of representation of data as a todo list\n\n```json\n{ \n  \"to-do\": [\n    {\"title\": \"buy-milk\", \"done\": false},\n    {\"title\": \"take-out-trash\", \"done\": true}\n  ]\n  \"settings\": {\n  ","LinkedNoteURLs":["notes/collaboration/immutable state objects.html"]},"notes/collaboration/immutable state objects.html":{"CompleteURL":"notes/collaboration/immutable state objects.html","Date":0,"Frontmatter":{"Title":"immutable state objects","Date":"","Draft":false,"JSFiles":null,"Type":"note","Description":"","PreviewImage":"","Tags":null,"Authors":null,"Head":false},"Body":"\u003cp\u003eThe state of data is \u003cem\u003enever\u003c/em\u003e modified in place. To change it, we pass the current state of it through an \u003ccode\u003eAutomerge.change\u003c/code\u003e function that returns a new object where that change is reflected along side a possible commit message that is with the change\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-js\"\u003e// pesudo code\nstate = Automerge.change(state, \u0026quot;Some kind of message\u0026quot;) {\n  (doc) =\u0026gt; {\n\t  doc.todo.push({\n\t\t  \u0026quot;title\u0026quot;: \u0026quot;Dry Laundry\u0026quot;,\n\t\t  \u0026quot;done\u0026quot;: false,\n\t  })\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003ethe \u003ccode\u003edoc\u003c/code\u003e callback here is mutable only within the callback.\u003c/p\u003e\n","MarkdownBody":"The state of data is *never* modified in place. To change it, we pass the current state of it through an `Automerge.change` function that returns a new object where that change is reflected along side","LinkedNoteURLs":[]}}